# Designate the output datatype (via designating which datatype must support read *and* write)
dataspaces:
  read_write_dataspace_id: Outputs
custom_taxonomic_specifications:

  # psum_spad buffer is dense but we need to give it fake format interfaces so that
  # skipping can target the psum_spad (in other words, so that we can save on psum_spad
  # accesses by using weight_spad and iact_spad sparse format metadata to index into the 
  # psum_spad memory)
  dense_buffer_format_interfaces:
  - name: psum_spad
    dataspaces:
    - name: Outputs
      dummy_format_interfaces:
      - flattened-rankIDs: [ [ C ] ]
#      - flattened-rankIDs: [ [ M ] ] 

force_attributes:

# Next two settings: disable fill optimization for the iact -> psum and weight -> psum
# skipping microarchitectures, since the "follower" is a dense buffer so there are no
# unnecessary leader fills to optimize away.
- uri: /.Skipping_shared_buffer1_shared_buffer3.IntersectionBD
  settings:
  - type: positional
    values:
    - position: 2
      value: 'two_finger_merge'

- uri: /.Skipping_shared_buffer1_psum_spad0
  settings:
  - type: positional
    values:
    - position: 3
      value: 'no_opt_fills'