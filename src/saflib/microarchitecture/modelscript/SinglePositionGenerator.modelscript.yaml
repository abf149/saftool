modelscript_version: 0.1
modelscript_primitives:
  - name: SinglePositionGeneratorModel
    from_taxonomic_primitive: SinglePositionGenerator
    export_attributes_to_model: true
    instance_aliases:
    - alias: C_U_passthrough
      instances:
      - C_U_passthrough
    - alias: C_C_counter
      instances:
      - C_C_counter
    scale_parameters:
      - name: clock
        type: real
        export_as_model_attribute: true
        inherit: true
      - name: technology
        type: string
        export_as_model_attribute: true
        inherit: true
    load_symbols:
      - port: md_in
        symbol_types:
        - type: level
          load_tensors:
          - load_tensor: coordinate
            load_ranks:
            - load_rank: dense_data_rank_size
            - load_rank: nodes_per_cycle
          - load_tensor: position
            load_ranks:
            - load_rank: positions_per_cycle
          - load_tensor: datatype
            load_ranks:
            - load_rank: metadata_word_width

      - port: md_in_ref
        symbol_types:
        - type: level
          load_tensors:
          - load_tensor: datatype
            load_ranks:
            - load_rank: metadata_word_width
        - type: peak
          load_tensors:
          - load_tensor: datatype
            load_ranks:
            - load_rank: metadata_word_width

      - port: pos_out
        symbol_types:
        - type: level
          load_tensors:
          - load_tensor: coordinate
            load_ranks:
            - load_rank: dense_data_rank_size
            - load_rank: nodes_per_cycle
          - load_tensor: position
            load_ranks:
            - load_rank: positions_per_cycle
            - load_rank: position_word_width
          - load_tensor: bandwidth
            load_ranks:
            - load_rank: metadata_read_width

    actions:
      # Metadata word arrives at input (md_in)
      - name: gen
      # Metadata word arrives at reference input (md_in_ref)
      - name: count_ref
      # Component is gated
      - name: gated_gen

    characterization_metric_models:
      - name: ref_counter
        # C_C_counter accumulator is a registered adder
        approximation: poly
        table_id: accelergy/data/primitives_table.csv
        rtl_id_expression: RegisteredAdder_bitwidth$(u)
        symbol_map:
          - variable: u
            # Reference input metadata word width (md_in_ref_ww) maps to adder bitwidth
            symbol: md_in_ref.peak.datatype.metadata_word_width
        latency:
          # Critical path length complies with clock latency
          parameter_id: clock
          single_latency: true
          latency_column_name: critical_path_clock_latency
        energy:
            # Convert characterized total power to energy, assuming the component is un-gated
            # for a duration equal to its critical path length (worst-case)
          - expression: combinational_total_power+register_total_power+clock_network_total_power
            type: power
        area:
          - expression: Combinational_Area+Noncombinational_Area
            type: area
        # Generate constraints on md_in_ref_ww to match characertized adder bitwidth values
        generate_constraints: true

    implementations:


      - name: C_U_passthrough
        # Just a direct input => output connection, no logic
        taxonomic_instance_alias: C_U_passthrough
        objective:
          # No energy/area
          actions:
            - name: gen
              energy: 0
            - name: count_ref
              energy: 0
            - name: gated_gen
              energy: 0
          area: 0
        constraints:

          - type: passthrough
            # Passthrough connection constraints
            list:
              - port_in: md_in
                port_out: pos_out
                suffixes:
                  # Passthru pr,nc,cr,rw, md_in -> pos_out
                  - level.position.positions_per_cycle # Output throughput is input throughput (pr)
                  - level.coordinate.dense_data_rank_size # Fiber size hasn't changed (nc)
                  - level.coordinate.nodes_per_cycle # Stepping through fiber coordinates with the same average stride (cr)
                  - level.bandwidth.metadata_read_width # Assume input, ouput bandwidth are matched (rw)
          - type: custom
            list:
              # Output pw (position word width) matches input ww (metadata word width)
              - ( @pos_out_pw ) == ( @md_in_ww )
          - type: values
            list:
              - symbol: md_in_ref.peak.datatype.metadata_word_width
                values:
                  # Dummy value for ceiling on metadata word width, since it has no impact on energy/area/latency
                  - 1000

      - name: C_C_counter
        # Accumulate count of metadata words arriving at reference input (md_in_ref), completely ignore metadata values
        # Output accumulator value every time a metadata word arrives at input (md_in), again *regardless of metadata word value*
        # Accumulated value is independent of metadata word *values*, however...the maximum count of coordinate metadata values
        #  which can arrive at the accumulator via md_in_ref, is equal to the coordinate-space size of the fiber, which one greater than
        #  the maximum possible coordinate metadata value. Thus, we require adder bitwidth >= 1 + coordinate metadata bitwidth. This is
        #  equivalent to bitwidth > coordinate metadata bitwidth i.e. strict inequality.
        taxonomic_instance_alias: C_C_counter
        objective:
          actions:
            - name: gen
              energy: 0
            - name: count_ref
              # Accumulator expends energy in order to increment each time a metadata word arrives at reference input (md_in_ref)
              energy: ( %(ref_counter) )
            - name: gated_gen
              energy: 0
          area: ( %(ref_counter) )
        constraints:
          - type: characterization_metrics_model
            list:
            # Import ref_counter constraints on md_in_ref_ww
            - ref_counter
          - type: passthrough
            list:
              - port_in: md_in
                port_out: pos_out
                suffixes:
                  # Passthru pr,nc,cr, from md_in -> pos_out
                  - level.position.positions_per_cycle # Output throughput matches input throughput (pr)
                  - level.coordinate.dense_data_rank_size # Fiber size hasn't changed (nc)
                  - level.coordinate.nodes_per_cycle # Still striding through fiber coordinates at same average rate
          - type: custom
            list:
              # Output pw (position word width) matches input ww (metadata word width)
              - ( @pos_out_pw ) == ( @md_in_ww )
              # By default, @md_in_ref_ww_thresh >= @md_in_ref_ww in order for the registered adder to have enough bits.
              # Override this with another inequality which enforces strictly-greater-than
              - ( @md_in_ref_ww_thresh ) >= ( @md_in_ref_ww ) + 1
              # Require output bandwidth (in bits by default) >= output throughput, converted to bits
              - ( @pos_out_rw ) >= ( @pos_out_pr ) * ( @pos_out_pw )
          #- type: values
          #  list:
          #    - symbol: md_in_ref.peak.datatype.metadata_word_width #md_in_ref_ww_thresh possible values (transitively applies to adder bitwidth)
          #      values:
          #        - 1
          #        - 2
          #        - 4
          #        - 8
          #        - 16