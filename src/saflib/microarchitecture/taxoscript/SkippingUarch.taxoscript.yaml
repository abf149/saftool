taxoscript_version: 0.1
taxoscript_components:
  - name: SkippingUarch
    attributes:
    - format: format_leader=? # Leader fiber/fiber 0 metadata format
    - format: format_follower=? # Follower fiber/fiber 1 metadata format
    - string: direction=bidirectional # SAF skip direction
      # bidirectional - underlying SAF is bidirectional skip
      # leader_follower - underlying SAF is leader/follower
      values: [bidirectional,leader_follower]
    - string: optimize_fills=?
      # no_opt_fills/yes_opt_fills - abscence/presence, respectively, of fill optimizer in topology
      values: [no_opt_fills,yes_opt_fills]
    ports:
    - input: md_in_leader(md)=attributes.format_leader # Leader fiber/fiber 0 metadata input
    - input: md_in_follower(md)=attributes.format_follower # Follower fiber/fiber 1 metadata input
    - output: pos_out_leader(pos)=addr # Leader fiber/fiber 0 payload memory address offset output
    - output: pos_out_follower(pos)=addr # Follower fiber/fiber 1 payload memory address offset output
    instances:

    # C/C bidirectional skipping (ExTensor-like)
    - C_C_bidirectional_no_opt_fills: [C,C,bidirectional,no_opt_fills]

    # B/B bidirectional skipping (SparTen-like)
    - B_B_bidirectional_no_opt_fills: [B,B,bidirectional,no_opt_fills]

    # Eyeriss v2-like C->U leader-follower skipping with optional fill-gating
    - C_U_leader_follower_no_opt_fills: [C,U,leader_follower,no_opt_fills]
    - C_U_leader_follower_yes_opt_fills: [C,U,leader_follower,yes_opt_fills]

    topologies:

      # X/X bidirectional skipping topologies

      - name: C_C_bidirectional_no_opt_fills # ExTensor-like
        components:
        - IntersectionBidirectional: IntersectionBD(C,C,?) # Unconstrained C/C intersection strategy
        - SinglePositionGenerator: SinglePgenLeader(C,C,?) # Unconstrained C->C single pgen strategy
        - SinglePositionGenerator: SinglePgenFollower(C,C,?) # Unconstrained C->C single pgen strategy
        netlist:
        # Leader md. input -> intersection, leader pgen md. ref. input
        - md: [md_in_leader,IntersectionBD.md_in0]
        - md: [md_in_leader,SinglePgenLeader.md_in_ref]
        # Follower md. input -> intersection, follower pgen md. ref. input
        - md: [md_in_follower,IntersectionBD.md_in1]
        - md: [md_in_follower,SinglePgenFollower.md_in_ref]
        # Intersection output -> leader/follower pgen md. inputs
        - md: [IntersectionBD.md_out,SinglePgenLeader.md_in]
        - md: [IntersectionBD.md_out,SinglePgenFollower.md_in]
        # Leader/follower pgen outputs -> leader/follower pos. outputs
        - pos: [SinglePgenLeader.pos_out,pos_out_leader]
        - pos: [SinglePgenFollower.pos_out,pos_out_follower]

      - name: B_B_bidirectional_no_opt_fills # SparTen-like
        components:
        - IntersectionBidirectional: IntersectionBD(B,B,?) # B/B intersection, unconstrained strategy
        - DoublePositionGenerator: DoublePgen(B,B,?,?) # B->B double-pgen, unconstrained source & reference strategies
        netlist:
        # Leader md. input -> intersection md. input 0 & leader pgen md. ref. input
        - md: [md_in_leader,IntersectionBD.md_in0]
        - md: [md_in_leader,DoublePgen.md_in0_ref]
        # Follower md. input -> intersection md. input 1 & follower pgen md. ref. input
        - md: [md_in_follower,IntersectionBD.md_in1]
        - md: [md_in_follower,DoublePgen.md_in1_ref]
        # Intersection output -> leader/follower pgen md. inputs
        - md: [IntersectionBD.md_out,DoublePgen.md_in]
        # Leader/follower pgen outputs -> leader/follower pos. outputs
        - pos: [DoublePgen.pos_out0,pos_out_leader]
        - pos: [DoublePgen.pos_out1,pos_out_follower]

      # X -> Y leader/follower skipping topologies

      - name: C_U_leader_follower_no_opt_fills # Eyeriss v2-like sans fill optimizer
        components:
        - IntersectionLeaderFollower: IntersectionLF(C,passthrough) # C->C leader/follower intersection, unconstrained strategy
        - SinglePositionGenerator: SinglePgenFollower(C,U,passthrough) # C->U single pgen, unconstrained strategy
        netlist:
        # Leader md. input -> intersection md. input & follower pgen md. ref. input
        - md: [md_in_leader,IntersectionLF.md_in_leader]
        - md: [md_in_leader,SinglePgenFollower.md_in_ref]
        # Intersection md. output -> follower pgen md. input
        - md: [IntersectionLF.md_out,SinglePgenFollower.md_in]
        # Follower pgen pos. output -> pos. output
        - pos: [SinglePgenFollower.pos_out,pos_out_follower]

      - name: C_U_leader_follower_yes_opt_fills  # Eyeriss v2-like w/ fill optimizer
        components:
        - IntersectionLeaderFollower: IntersectionLF(C,?) # C->C leader/follower intersection, unconstrained strategy
        - SinglePositionGenerator: SinglePgenFollower(C,U,?) # C->U single pgen, unconstrained strategy
        - SinglePositionGenerator: SinglePgenLeader(C,C,?) # C->U single pgen, unconstrained strategy
        - FillOptimizer: FillOptimizerLeader(pipeline_bubble_gate) # Fill-optimizer unit, unconstrained strategy
        netlist:
        # Leader md. input -> intersection md. input & follower pgen md. ref. input & both leader pgen md. inputs
        - md: [md_in_leader,IntersectionLF.md_in_leader]
        - md: [md_in_leader,SinglePgenFollower.md_in_ref]
        - md: [md_in_leader,SinglePgenLeader.md_in_ref]
        - md: [md_in_leader,SinglePgenLeader.md_in]
        # Intersection md. output -> follower pgen md. input
        - md: [IntersectionLF.md_out,SinglePgenFollower.md_in]
        # Leader pgen pos. output -> FillOptimizer pos. input
        - pos: [SinglePgenLeader.pos_out,FillOptimizerLeader.pos_in]
        # Follower pgen pos. output -> pos. output
        - pos: [SinglePgenFollower.pos_out,pos_out_follower]